/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.11 Floaters.glb --transform --simplify
*/

import React, { useRef } from 'react'
import { useThree, useFrame, useLoader } from "@react-three/fiber"
import { useGLTF, useTexture, MeshRefractionMaterial, CubeCamera, Backdrop, Line } from "@react-three/drei"
import { RGBELoader } from 'three-stdlib'
// import { DissolveMaterial } from '../../src/Components/Dissolve/DissolveMaterial'
import { MenModel } from '../../public/Model/Menmodel'
export function Floaters(props) {
  
  const { nodes, materials } = useGLTF('/Model/Floating/Floaters-transformed.glb')
  const config = {
    bounces: 3,
    aberrationStrength: 0.01,
    ior: 2.75,
    fresnel: 1/1e18,
    color: '#ff7300',
    fastChroma: true
    }
  const glass = {
    bounces: 3,
    aberrationStrength: 0.01,
    ior: 2.75,
    fresnel: 1/1e18,
    color: '#fff700',
    fastChroma: true
    }
  const gloves = {
    bounces: 3,
    aberrationStrength: 0.01,
    ior: 2.75,
    fresnel: 1/1e18,
    color: '#f2ff00',
    fastChroma: true
    }
  const mask = {
    bounces: 3,
    aberrationStrength: 0.01,
    ior: 2.75,
    fresnel: 1/1e18,
    color: '#ff0000',
    fastChroma: true
    }
  const shoes = {
    bounces: 3,
    aberrationStrength: 0.01,
    ior: 2.75,
    fresnel: 1/1e18,
    color: '#ff9500',
    fastChroma: true
    }
    const diamond = useRef()
  const texture = useLoader(RGBELoader, 'https://dl.polyhaven.org/file/ph-assets/HDRIs/hdr/1k/aerodynamics_workshop_1k.hdr')
    // useFrame((state,delta)=>{
    //   diamond.current.rotation.y += 0.1
    // })
  return (
    <group {...props} dispose={null}>
      <mesh ref={diamond} geometry={nodes.Diamond17.geometry} material={materials.Diamond} position={[0, 1.94, 0]} rotation={[0.04, -Math.PI / 2, 0]} scale={[1, 2, 1]}>
        <MeshRefractionMaterial envMap={texture} toneMapped={false} {...config}/>
        {/* <DissolveMaterial baseMaterial={materials.Diamond}/> */}
      </mesh>
      <mesh geometry={nodes.Glass08.geometry} material={materials.Mask_Mat} position={[-0.03, 2.51, 0.17]} scale={0.015}>
        <MeshRefractionMaterial envMap={texture} toneMapped={false} {...glass}/>
      </mesh>
      <mesh geometry={nodes.Mask21.geometry} material={materials.Mask_Mat} position={[0.01, 2.49, 0.12]} scale={0.03}>
        <MeshRefractionMaterial envMap={texture} toneMapped={false} {...mask}/>
      </mesh>
      <mesh geometry={nodes.GlovesRight.geometry} material={materials.Mask_Mat} position={[0.86, 1.35, 0.15]} rotation={[-1.1, 0, -1.89]} scale={0.03}>
        <MeshRefractionMaterial envMap={texture} toneMapped={false} {...gloves}/>
        {/* <DissolveMaterial baseMaterial={materials.Diamond}/> */}
      </mesh>
      <mesh geometry={nodes.RightShoe.geometry} material={materials.Mask_Mat} position={[0.19, -0.06, 0.24]} scale={0.15}>
      <MeshRefractionMaterial envMap={texture} toneMapped={false} {...shoes}/>

      </mesh>
      <mesh geometry={nodes.LeftShoe.geometry} material={materials.Mask_Mat} position={[-0.31, -0.06, 0.24]} scale={0.15}>
      <MeshRefractionMaterial envMap={texture} toneMapped={false} {...shoes}/>
        
      </mesh>
    </group>
  )
}

useGLTF.preload('/Model/Floating/Floaters-transformed.glb')
