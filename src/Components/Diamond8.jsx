/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.11 diamond8.glb
*/
//nodes.Plane012.geometry
import React, { useRef, useState,useMemo} from 'react'
import { useThree, useFrame, useLoader } from "@react-three/fiber"
import { useGLTF, useTexture, MeshRefractionMaterial, CubeCamera, Backdrop, Line } from "@react-three/drei"
import { LineSegments, Mesh, PlaneBufferGeometry, MeshBasicMaterial } from "three";
import { RGBELoader } from 'three-stdlib'
import Data from './Data'
import * as THREE from "three"
export function Diamond8(props) {
  const gridSize = 10; // Size of the grid
  const squareSize = 1; // Size of each square
  const backgroundMaterial = new MeshBasicMaterial({ color: "lightblue" });
  const model = useRef()
  const [id, setId] = useState()
  const { nodes, materials } = useGLTF('/Model/diamond8.glb')
  const dummy = useMemo(() => new THREE.Object3D(), [])
  let diamondArray = Data[props.id].data
  const diamonds = useMemo(
      () => diamondArray,
      []
    )
  useFrame((state, delta) => {
    // Update instanced diamonds
    diamonds.forEach((data, i) => {
        const { position, rotation,scale,size } = data
        // console.log(data)
        dummy.position.set(position[0], position[1], position[2])
        dummy.rotation.set(rotation[0] , rotation[1], rotation[2])
        dummy.scale.setScalar( id == 1 ? scale : size )
        const t = (1 + Math.sin(state.clock.elapsedTime * 2)) / 2
        // dummy.current.color.setRGB(1 + t * 10, 2, 20 + t * 50)
        dummy.updateMatrix()            
        model.current.setMatrixAt(i, dummy.matrix)

        // console.log(model)
    })
    model.current.instanceMatrix.needsUpdate = true
    })
  const texture = useLoader(RGBELoader, 'https://dl.polyhaven.org/file/ph-assets/HDRIs/hdr/1k/aerodynamics_workshop_1k.hdr')
  const config = {
    bounces: 3,
    aberrationStrength: 0.01,
    ior: 2.75,
    fresnel: 1,
    color: 'red',
    fastChroma: true
    }
  return (

    <CubeCamera resolution={256} frames={1} envMap={texture}>
      {(texture) => (
        //  args={[nodes.Diamond_1_0.geometry, null, diamonds.length]}
        // onPointerOver={(e) => (e.stopPropagation(), setHover(true))} onPointerOut={(e) => setHover(false)}
        <>
           <Line points={[0, 1, 0, 0, -1, 0]} color="green" linewidth={1} />
           <Line points={[0, 1, 0.5, 0, -1, 0.5]} color="red" linewidth={1} />
           <Line points={[0, 1, 1, 0, -1, 1]} color="red" linewidth={1} />
           <Line points={[0, 1, 1.5, 0, -1, 1.5]} color="red" linewidth={1} />
           <Line points={[0, 1, -0.5, 0, -1, -0.5]} color="red" linewidth={1} />
           <Line points={[0, 1, -1, 0, -1, -1]} color="red" linewidth={1} />
           <Line points={[0, 1, -1.5, 0, -1, -1.5]} color="red" linewidth={1} />           
           
           <Line points={[0, 1, 1.5, 0, 1, -1.5]} color="red" linewidth={1} /> 
           <Line points={[0, .8, 1.5, 0, .8, -1.5]} color="red" linewidth={1} />  
           <Line points={[0, .6, 1.5, 0, .6, -1.5]} color="red" linewidth={1} />  
           <Line points={[0, .4, 1.5, 0, .4, -1.5]} color="red" linewidth={1} />  
           <Line points={[0, .2, 1.5, 0, .2, -1.5]} color="red" linewidth={1} />  
           <Line points={[0, 0, 1.5, 0, 0, -1.5]} color="red" linewidth={1} />  
           <Line points={[0, -1, 1.5, 0, -1, -1.5]} color="red" linewidth={1} /> 
           <Line points={[0, -.8, 1.5, 0, -.8, -1.5]} color="red" linewidth={1} />  
           <Line points={[0, -.6, 1.5, 0, -.6, -1.5]} color="red" linewidth={1} />  
           <Line points={[0, -.4, 1.5, 0, -.4, -1.5]} color="red" linewidth={1} />  
           <Line points={[0, -.2, 1.5, 0, -.2, -1.5]} linewidth={1} color="red">
            <meshBasicMaterial attach="material" color="red" wireframe={false} />  
          </Line>                
          <mesh position={[0.02, 1, 0]} rotation={[0,Math.PI/2,0]}>
            <planeBufferGeometry attach="geometry" args={[.1, .1]} />
            <meshBasicMaterial
              attach="material"
              color="red"
              opacity={0.5}
              transparent
              side={THREE.DoubleSide}
            />
          </mesh>
          <instancedMesh ref={model} args={[nodes.Plane012.geometry, null, diamonds.length]} >
          
            <MeshRefractionMaterial envMap={texture} toneMapped={false} {...config}/>
          </instancedMesh>
        </>
      )}
    </CubeCamera>

    // <group {...props} dispose={null}>
    //   <mesh geometry={nodes.Plane014.geometry} material={materials.DIAMANT} rotation={[-Math.PI / 2, 0, 0]} scale={0.01} />
    // </group>
  )
}

useGLTF.preload('/Model/diamond8.glb')

