/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.11 Diamond.glb --transfrom --simplify
*/

import React, { useRef } from 'react'
import { useThree, useFrame, useLoader } from "@react-three/fiber"
import { useGLTF, useTexture, MeshRefractionMaterial, CubeCamera, Backdrop, Line } from "@react-three/drei"
import { RGBELoader } from 'three-stdlib'
export function Diamond(props) {
  const { nodes, materials } = useGLTF('/Model/Floating/Diamond.glb')
  const model = useRef()
  const config = {
    bounces: 3,
    aberrationStrength: 0.01,
    ior: 2.75,
    fresnel: 1,
    // color: '#132106',
    fastChroma: true
    }
    useFrame((state,delta)=>{
      console.log(model.current.rotation)
      model.current.rotation.y += 0.03
    })
  const texture = useLoader(RGBELoader, 'https://dl.polyhaven.org/file/ph-assets/HDRIs/hdr/1k/aerodynamics_workshop_1k.hdr')
  return (
    <group ref={model} {...props} dispose={null}>
      <mesh geometry={nodes.Diamond17.geometry} material={materials.Diamond} position={[0, 1.94, 0]} rotation={[0.04, -Math.PI / 2, 0]} scale={[1, 2, 1]} material-color={"red"}>
        <MeshRefractionMaterial envMap={texture} toneMapped={false} {...config}/>
      </mesh>
    </group>
  )
}

useGLTF.preload('/Model/Floating/Diamond.glb')
